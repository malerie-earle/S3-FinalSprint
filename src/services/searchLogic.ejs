const logger = require('../logEvents.js');
const pgDal = require('../services/pg.auth_db.js');
const mDal = require('../services/m.auth_db.js');

async function searchInPostgres(query, res) {
  try {
    const client = await pgDal.connect();

    // Perform the PostgreSQL search using parameterized query
    const result = await client.query('SELECT * FROM your_table WHERE column ILIKE $1', ['%' + query + '%']);
    const searchResults = result.rows;

    // Send search results
    res.json({ message: `Search results for '${query}' in PostgreSQL database`, data: searchResults });

    // Release the client back to the pool
    client.release();
  } catch (error) {
    logger.error('Error searching in PostgreSQL:', error);
    res.status(500).send('Internal Server Error');
  }
}

async function searchInMongo(query, res) {
  try {
    // Connect to MongoDB
    const client = await mDal.connect();

    // Specify the database and collection
    const db = client.db('NewfieNook'); 
    const collection = db.collection('Recipes'); 

    // Perform the search using safe query building techniques
    const result = await collection.find({ $text: { $search: query } }).toArray();
    const searchResults = result;

    // Send search results
    res.json({ message: `Search results for '${query}' in MongoDB`, data: searchResults });

    // Close the connection
    await client.close();
  } catch (error) {
    logger.error('Error searching in MongoDB:', error);
    res.status(500).send('Internal Server Error');
  }
}


// Result template for PostgreSQL products
const productResultTemplate = (data) => {
  // Customize the format based on your requirements
  return {
      type: 'product',
      data: data
  };
};

// Result template for PostgreSQL customers
const customerResultTemplate = (data) => {
  // Customize the format based on your requirements
  return {
      type: 'customer',
      data: data
  };
};

// Result template for PostgreSQL vendors
const vendorResultTemplate = (data) => {
  // Customize the format based on your requirements
  return {
      type: 'vendor',
      data: data
  };
};

// Result template for MongoDB recipes
const recipeResultTemplate = (data) => {
  // Customize the format based on your requirements
  return {
      type: 'recipe',
      data: data
  };
};




module.exports = {
  searchInPostgres,
  searchInMongo
};
